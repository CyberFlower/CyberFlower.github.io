I"2,<p><a href="https://www.acmicpc.net/problem/16763">https://www.acmicpc.net/problem/16763</a></p>

<p>최단거리로 가는 것과 먹이가 있는 곳에 들러서 먹고 가는 것 중에 어느 경로가 이익인지 구하는 문제입니다. 급식소에는 최대한 한번만 들를 수 있습니다.</p>

<p>그래프 모델링을 잘 한다면 다익스트라로 풀 수 있습니다. 처음에는 최단거리를 구하면 되기 때문에 일반적인 다익스트라를 돌려 줍니다.</p>

<p>우리는 급식소에서 밥을 먹는 과정을 음간선이라고 생각할 수 있습니다. 또, 하나의 급식소만 들러야 하기 때문에 negative cycle도 생기지 않습니다. negative cycle이 생기지 않으니 모델링만 잘 하면!! 다익스트라를 돌릴 수 있습니다.</p>

<p>그래서 그래프 모델링은 어떻게 할까요? 새로운 정점 N’ 을 만듭니다. 그리고 N’ 에서 모든 급식소에 {처음에 구한 최단거리-먹이}를 가중치로 갖는 간선을 연결합니다.</p>

<p>소가 밥을 먹고 N으로 가는 경우에 가장 이익이 되는 경로는 어떤 급식소 x에 가고 나서 가장 빠른 경로로 N으로 가는 경로입니다. 즉, N에서 {최단거리-먹이} 에 해당하는 경로를 만들어 주는 것이 합리적입니다. 굳이 N+1로 나눈 이유는 N+1로 나누면 한 번은 반드시 방문해야 한다는 조건과 음의 사아클 처리가 쉬워지기 때문입니다.</p>

<p>코드를 보도록 하겠습니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
#define ff first
#define ss second
#define pb push_back
#define INF (int)1e9+5
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">SZ</span><span class="o">=</span><span class="mi">50005</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">graph</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">dst1</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">dst2</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">void</span> <span class="nf">dijk</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">dst</span><span class="p">,</span> <span class="kt">int</span> <span class="n">stt</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">stt</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">dst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">INF</span><span class="p">;</span>
	<span class="n">dst</span><span class="p">[</span><span class="n">stt</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">;</span>
	<span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="o">-</span><span class="n">dst</span><span class="p">[</span><span class="n">stt</span><span class="p">],</span><span class="n">stt</span><span class="p">});</span>
	<span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">pq</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
		<span class="n">pii</span> <span class="n">t</span><span class="o">=</span><span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
		<span class="k">if</span><span class="p">(</span><span class="n">dst</span><span class="p">[</span><span class="n">t</span><span class="p">.</span><span class="n">ss</span><span class="p">]</span><span class="o">!=-</span><span class="n">t</span><span class="p">.</span><span class="n">ff</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="n">pii</span> <span class="n">nxt</span><span class="o">:</span><span class="n">graph</span><span class="p">[</span><span class="n">t</span><span class="p">.</span><span class="n">ss</span><span class="p">]){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">dst</span><span class="p">[</span><span class="n">nxt</span><span class="p">.</span><span class="n">ff</span><span class="p">]</span><span class="o">&gt;</span><span class="n">dst</span><span class="p">[</span><span class="n">t</span><span class="p">.</span><span class="n">ss</span><span class="p">]</span><span class="o">+</span><span class="n">nxt</span><span class="p">.</span><span class="n">ss</span><span class="p">){</span>
				<span class="n">dst</span><span class="p">[</span><span class="n">nxt</span><span class="p">.</span><span class="n">ff</span><span class="p">]</span><span class="o">=</span><span class="n">dst</span><span class="p">[</span><span class="n">t</span><span class="p">.</span><span class="n">ss</span><span class="p">]</span><span class="o">+</span><span class="n">nxt</span><span class="p">.</span><span class="n">ss</span><span class="p">;</span>
				<span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">({</span><span class="o">-</span><span class="n">dst</span><span class="p">[</span><span class="n">nxt</span><span class="p">.</span><span class="n">ff</span><span class="p">],</span><span class="n">nxt</span><span class="p">.</span><span class="n">ff</span><span class="p">});</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">k</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="o">&gt;&gt;</span><span class="n">z</span><span class="p">;</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">pb</span><span class="p">({</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">});</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">pb</span><span class="p">({</span><span class="n">x</span><span class="p">,</span><span class="n">z</span><span class="p">});</span>
	<span class="p">}</span>
	<span class="n">dijk</span><span class="p">(</span><span class="n">dst1</span><span class="p">,</span><span class="n">n</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">pb</span><span class="p">({</span><span class="n">x</span><span class="p">,</span><span class="n">dst1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">-</span><span class="n">y</span><span class="p">});</span>
	<span class="p">}</span>
	<span class="n">dijk</span><span class="p">(</span><span class="n">dst2</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">dst1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">dst2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET