I">8<h3 id="scc와-2-sat">SCC와 2-SAT</h3>

<hr />

<p>SCC와 함께 배우는 2-satisfiability problem(2 SAT)이라는 알고리즘이 있습니다. 일단 SCC를 배우면 2 SAT 이해와 구현은 쉽기 때문에 SCC부터 설명하도록 하겠습니다.</p>

<hr />

<h3 id="scc-strongly-connected-component-강한-연결-요소">SCC (Strongly Connected Component, 강한 연결 요소)</h3>

<hr />

<p>SCC는 유향그래프(Direct graph, 방향이 있는 그래프)에서 cycle을 찾는 알고리즘입니다. cycle이 무엇인지 알기 위해 백준 scc 문제에 있는 이미지를 볼까요?</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/upload/201008/scco.PNG" alt="scc" /></p>

<p>{a,b,e}는 a,b,e중 어느 노드에서도 다른 노드로 갈 수 있기 때문에 cycle입니다. {a,b,e}를 포함하여 4개의 cycle을 볼 수 있습니다.</p>

<p>scc를 구하는 알고리즘에는 코사라주 알고리즘과 타잔 알고리즘이 있는데, 저는 타잔 알고리즘 코드를 보여드리도록 하겠습니다.
(복잡도는 둘다 $ O(V+E) $ 로 동일합니다. 타잔 알고리즘의 경우 구해진 scc 결과를 reverse하면 위상정렬한 DAG의 결과가 나오기 때문에 조금 더 범용적입니다.)</p>

<p>알고리즘 개관은 다음과 같습니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 한번의 dfs를 통해 scc를 구합니다. 
  1-1. 스택에 쌓인 순서를 파악하기 위해 dfs_num을 저장합니다. 그리고 스택에 쌓아 줍시다.
  1-2. DSU 알고리즘과 유사하게, 각 그룹에 부모를 설정합니다. DSU와 마찬가지로 초기 노드의 부모는 자기 자신입니다.
  1-3. 인접한 노드에 방문하지 않은 노드가 있다면 dfs 탐색을, 방문했지만 다른 scc 그룹에 속하지 않은 노드가 있다면 해당 노드의 dfs_num을 확인합니다.
  1-4. 1-3에서 확인한 dfs_num 중 가장 작은 dfs_num이 본인이라면 해당 노드를 부모로 하는 scc 그룹화가 완료되었다고 할 수 있습니다.
</code></pre></div></div>

<p>이제 코드를 봅시다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SCC</span><span class="p">{</span>
<span class="nl">private:</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vi</span><span class="o">&gt;</span> <span class="n">graph</span><span class="p">;</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vi</span><span class="o">&gt;</span> <span class="n">scc</span><span class="p">;</span>
    <span class="n">vi</span> <span class="n">idx</span><span class="p">,</span><span class="n">fin</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">dfs_num</span><span class="p">;</span>
    <span class="n">vi</span> <span class="n">st</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
        <span class="n">idx</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=++</span><span class="n">dfs_num</span><span class="p">;</span>
        <span class="n">st</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">par</span><span class="o">=</span><span class="n">idx</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">adj</span><span class="o">:</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="n">adj</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">par</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">par</span><span class="p">,</span><span class="n">dfs</span><span class="p">(</span><span class="n">adj</span><span class="p">));</span>
            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">fin</span><span class="p">[</span><span class="n">adj</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">par</span><span class="o">=</span><span class="n">min</span><span class="p">(</span><span class="n">par</span><span class="p">,</span><span class="n">idx</span><span class="p">[</span><span class="n">adj</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">par</span><span class="o">==</span><span class="n">idx</span><span class="p">[</span><span class="n">x</span><span class="p">]){</span>
            <span class="n">vi</span> <span class="n">grp</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
                <span class="kt">int</span> <span class="n">t</span><span class="o">=</span><span class="n">st</span><span class="p">.</span><span class="n">back</span><span class="p">();</span> <span class="n">st</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
                <span class="n">fin</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
                <span class="n">grp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="n">t</span><span class="o">==</span><span class="n">x</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">scc</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">grp</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">par</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nl">public:</span>
    <span class="n">SCC</span><span class="p">(){</span>
        <span class="n">dfs_num</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
        <span class="n">graph</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">5</span><span class="p">);</span>
        <span class="n">idx</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
        <span class="n">fin</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="n">b</span><span class="p">;</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="n">get_ans</span><span class="p">(){</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">idx</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
            <span class="n">dfs</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">for</span><span class="p">(</span><span class="n">vi</span> <span class="o">&amp;</span><span class="n">xx</span><span class="o">:</span><span class="n">scc</span><span class="p">)</span> <span class="n">sort</span><span class="p">(</span><span class="n">xx</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">xx</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
        <span class="n">sort</span><span class="p">(</span><span class="n">scc</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">scc</span><span class="p">.</span><span class="n">end</span><span class="p">(),[</span><span class="o">&amp;</span><span class="p">](</span><span class="k">const</span> <span class="n">vi</span> <span class="o">&amp;</span><span class="n">v1</span><span class="p">,</span> <span class="k">const</span> <span class="n">vi</span> <span class="o">&amp;</span><span class="n">v2</span><span class="p">){</span>
            <span class="k">return</span> <span class="n">v1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&lt;</span><span class="n">v2</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="p">});</span>
        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">scc</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="n">vi</span> <span class="n">xx</span><span class="o">:</span><span class="n">scc</span><span class="p">){</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">yy</span><span class="o">:</span><span class="n">xx</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">yy</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
            <span class="n">cout</span><span class="o">&lt;&lt;-</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p><a href="https://www.acmicpc.net/problem/2150">백준 2150 Strongly Connected Component</a> 의 정답코드입니다.</p>

<hr />

<h3 id="2-sat-2-satisfiable-problem">2-SAT (2 Satisfiable problem)</h3>

<hr />

<p>$ F = (!x_1 \ or \ x_2) \ and \ (x_1 \ or \ !x_2) \ and \ (x_1 \ or \ x_3) \ and \ !x_1   \ and \ x_2 $ 가 참을 만족하도록 하는 $x_1,x_2,x_3$를 찾을 수 있을까요?</p>

<p>2 SAT은 다시 말해서, 이러한 2가지 결과(boolean)을 갖는 관계식이 성립할 수 있는지, 그리고 성립한다면 그 해를 찾는 알고리즘입니다.</p>

<p>우리는 2 SAT 문제를 방향그래프로 바꾸어 생각할 수 있습니다. $ x_1,x_2,…,x_n $ 의 변수로 이루어진 관계식이 있다고 생각해봅시다. 그리고 {$ x_1,x_2,…,x_n $} , {$ !x_1,!x_2,…,!x_n $} 두 집합으로 이루어진 그래프를 생각해봅시다.</p>

<p>이제 감이 오시나요? 우리는 $\rightarrow$ 을 이용하여 그래프를 그릴 수 있으며, x_i와 !x_i가 같은 scc에 포함된다면 이는 관계식을 만족시키는 해가 없다는 말과 동치가 됩니다. ($ a \ or \ b = (!a \rightarrow b) \ and \ (!b \rightarrow a) $ 로 변환 가능)</p>

<p>해가 존재하는 경우 어떻게 해를 찾을 수 있을까요? 들어오는 간선이 없는 노드의 경우에는 false라고 가정하면 아무런 문제가 없습니다. ($p \rightarrow q$)에서 p가 false라고 해도 q에는 영향을 주지 않죠. 그렇게 되면 $!p$는 당연히 true가 되겠군요. 이러한 방식을 계속 하다 보면 하나의 해를 찾을 수 있습니다.</p>

<p>위의 과정을 dfs 탐색을 한번 더 하는 것 보다 쉽게 구현할 수 있습니다. $p$, $!p$ 둘 중에 하나가 결정되기 전에는 둘 다 어떤 값을 갖아도 무방합니다. 둘 중에 먼저 결정되는 노드가 무엇인지만 파악하면 됩니다.</p>

<p>즉, $p$와 $!p$ 에 dfs_num을 비교하여 둘 중에 dfs_num이 더 큰 수가 위상정렬 결과 먼저 나오는 노드이므로 거짓입니다. 물론 이 방식 이외에도 다른 해가 존재할 수 있습니다만, 고려할 필요는 없습니다. 코드는 scc와 동일하니 넘어가도록 하겠습니다.</p>
:ET