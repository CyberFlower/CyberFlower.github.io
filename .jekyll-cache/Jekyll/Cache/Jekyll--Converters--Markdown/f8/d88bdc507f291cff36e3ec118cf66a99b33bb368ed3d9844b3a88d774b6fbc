I"1'<p><a href="https://www.acmicpc.net/problem/3505">https://www.acmicpc.net/problem/3505</a></p>

<p>어떤 노드 x에 대하여 다른 모든 노드와 한 개 이상의 cycle이 존재한다면 어떤 간선을 지워도 x에서 모든 노드에 대한 연결성이 사라지지 않습니다.</p>

<p>추가해야 하는 간선의 개수가 (리프 노드의 개수+1)/2 임을 증명해 봅시다.</p>

<ol>
  <li>
    <p>cycle이 생기기 위해서는 degree의 개수(연결된 노드의 개수)가 2 이상이여야 함은 자명합니다. 따라서 추가해야 하는 간선의 개수는 최소 (리프 노드의 개수+1)/2 입니다.</p>
  </li>
  <li>
    <p>루트(1)의 모든 subtree에 대하여(추가되기 전 트리 기준), 다른 subtree와 연결되는 간선이 있다면 이 subtree는 항상 연결성을 유지합니다.</p>
  </li>
  <li>
    <p>리프 노드를 dfs 방문 순서에 따라 정렬해 봅시다. 또, 모든 리프노드의 개수를 N이라 합시다. N이 짝수인 경우 모든 리프노드에 대하여 $ a_i $ 와 $ a_{i+N/2} $ 를 연결한다면 모든 subtree가 다른 subtree와 연결됩니다. 귀류법으로 쉽게 증명할 수 있으므로 넘어가도록 하겠습니다.</p>
  </li>
  <li>
    <p>N이 홀수인 경우 짝수와 마찬가지로 연결한 후, $a_N $ 과 $ a_0 $를 연결하면 됩니다.</p>
  </li>
</ol>

<p>증명되었으니 코드를 보도록 합시다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
#define pb push_back
#define ff first
#define ss second
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">SZ</span><span class="o">=</span><span class="mi">100005</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">graph</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">dfsn</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">deg</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">p</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">par</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
	<span class="n">dfsn</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=++</span><span class="n">p</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">nxt</span><span class="o">:</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">par</span><span class="o">==</span><span class="n">nxt</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
		<span class="n">dfs</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">nxt</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">pb</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">pb</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
		<span class="n">deg</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">++</span><span class="p">;</span> <span class="n">deg</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">dfs</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">deg</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="n">v</span><span class="p">.</span><span class="n">pb</span><span class="p">({</span><span class="n">dfsn</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">i</span><span class="p">});</span>
	<span class="p">}</span>
	<span class="n">sort</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
	<span class="kt">int</span> <span class="n">sz</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">sz</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="n">ans</span><span class="p">.</span><span class="n">pb</span><span class="p">({</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ss</span><span class="p">,</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">sz</span><span class="o">/</span><span class="mi">2</span><span class="p">].</span><span class="n">ss</span><span class="p">});</span>
	<span class="p">}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">sz</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="n">ans</span><span class="p">.</span><span class="n">pb</span><span class="p">({</span><span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">ss</span><span class="p">,</span><span class="n">v</span><span class="p">[</span><span class="n">sz</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">ss</span><span class="p">});</span>
	<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="n">pii</span> <span class="n">x</span><span class="o">:</span><span class="n">ans</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="p">.</span><span class="n">ff</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="o">&lt;&lt;</span><span class="n">x</span><span class="p">.</span><span class="n">ss</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET