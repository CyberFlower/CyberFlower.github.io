I">T<p><a href="https://www.acmicpc.net/problem/2912">https://www.acmicpc.net/problem/2912</a></p>

<p>세그먼트 트리 설계도 어렵고 구현도 조금 까다로운 문제이다. 문제 아이디어는 다음과 같다.</p>

<p>문제 아이디어</p>

<ol>
  <li>절반보다 많은 수의 색을 segment tree에 저장한다. 그러한 색이 없다면 -1을 저장한다.</li>
</ol>

<p>1-1. 어떤 구간을 2개의 구간 L,R으로 나누어 생각해보자. 그 구간에서 절반보다 많이 존재하는 색이 존재한다면, 이는 L의 절반보다 많은 색과 R의 절반보다 많은 색 중 하나이다.</p>

<p>1-2. lower_bound와 upper_bound를 이용하여 해당 구간에서 색의 개수를 구할 수 있다.</p>

<p>1-3. 1-1,1-2를 이용하여 segment tree update가 가능하다. $ log(n) \times log(n) $ 의 시간복잡도가 나온다.</p>

<ol>
  <li>구간 [l,r]에서 가장 많은 수가 있는 모자의 후보는 [l,r]의 sub range에 있는 모든 구간의 대표값들 중 하나이다.</li>
</ol>

<p>2-1. 후보들에 대하여 모자의 개수를 모두 구해보자. 쿼리당 $ log(n) \times log(n) $ 의 시간복잡도가 나온다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
#define pb push_back
#define ff first
#define ss second
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">SZ</span><span class="o">=</span><span class="mi">300005</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">COL</span><span class="o">=</span><span class="mi">10005</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">graph</span><span class="p">[</span><span class="n">COL</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">seg</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="nf">col_num</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">up</span><span class="o">=</span><span class="n">upper_bound</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">begin</span><span class="p">(),</span><span class="n">graph</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">end</span><span class="p">(),</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="n">graph</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">begin</span><span class="p">();</span>
	<span class="kt">int</span> <span class="n">low</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">begin</span><span class="p">(),</span><span class="n">graph</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">end</span><span class="p">(),</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="n">graph</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">begin</span><span class="p">();</span>
	<span class="k">return</span> <span class="n">up</span><span class="o">-</span><span class="n">low</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">update</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">g</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="o">&lt;</span><span class="n">g</span> <span class="o">||</span> <span class="n">g</span><span class="o">&lt;</span><span class="n">l</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">==</span><span class="n">r</span><span class="p">){</span>
		<span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">;</span>
		<span class="k">return</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">update</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="p">,</span><span class="n">l</span><span class="p">,(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">g</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
	<span class="n">update</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">g</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">lc</span><span class="o">=</span><span class="n">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="p">],</span><span class="n">rc</span><span class="o">=</span><span class="n">seg</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
	<span class="k">if</span><span class="p">(</span><span class="n">lc</span><span class="o">==-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">rc</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">col_num</span><span class="p">(</span><span class="n">rc</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=</span><span class="n">rc</span><span class="p">;</span>
		<span class="k">else</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">rc</span><span class="o">==-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">lc</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">col_num</span><span class="p">(</span><span class="n">lc</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=</span><span class="n">lc</span><span class="p">;</span>
		<span class="k">else</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>		
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">lc</span><span class="o">!=-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">rc</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">col_num</span><span class="p">(</span><span class="n">rc</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=</span><span class="n">rc</span><span class="p">;</span>
		<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">col_num</span><span class="p">(</span><span class="n">lc</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=</span><span class="n">lc</span><span class="p">;</span>
		<span class="k">else</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fl</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fr</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="n">r</span><span class="o">&lt;</span><span class="n">fl</span> <span class="o">||</span> <span class="n">fr</span><span class="o">&lt;</span><span class="n">l</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="n">fl</span><span class="o">&lt;=</span><span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="o">&lt;=</span><span class="n">fr</span><span class="p">)</span> <span class="k">return</span> <span class="n">seg</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">lc</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="p">,</span><span class="n">l</span><span class="p">,(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="n">fl</span><span class="p">,</span><span class="n">fr</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">rc</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">r</span><span class="p">,</span><span class="n">fl</span><span class="p">,</span><span class="n">fr</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">lc</span><span class="o">==-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">rc</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">col_num</span><span class="p">(</span><span class="n">rc</span><span class="p">,</span><span class="n">fl</span><span class="p">,</span><span class="n">fr</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">fr</span><span class="o">-</span><span class="n">fl</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">rc</span><span class="o">==-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">lc</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">col_num</span><span class="p">(</span><span class="n">lc</span><span class="p">,</span><span class="n">fl</span><span class="p">,</span><span class="n">fr</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">fr</span><span class="o">-</span><span class="n">fl</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>  <span class="k">return</span> <span class="n">lc</span><span class="p">;</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>		
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">lc</span><span class="o">!=-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">rc</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">col_num</span><span class="p">(</span><span class="n">rc</span><span class="p">,</span><span class="n">fl</span><span class="p">,</span><span class="n">fr</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">fr</span><span class="o">-</span><span class="n">fl</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="n">rc</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">col_num</span><span class="p">(</span><span class="n">lc</span><span class="p">,</span><span class="n">fl</span><span class="p">,</span><span class="n">fr</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">fr</span><span class="o">-</span><span class="n">fl</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="n">lc</span><span class="p">;</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>		
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios_base</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="n">memset</span><span class="p">(</span><span class="n">seg</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">seg</span><span class="p">));</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">c</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">c</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">pb</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
		<span class="n">update</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">x</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">q</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">q</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="o">--</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">l</span><span class="o">&gt;&gt;</span><span class="n">r</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">ans</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">l</span><span class="p">,</span><span class="n">r</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="n">ans</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"no"</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
		<span class="k">else</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"yes "</span><span class="o">&lt;&lt;</span><span class="n">ans</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET