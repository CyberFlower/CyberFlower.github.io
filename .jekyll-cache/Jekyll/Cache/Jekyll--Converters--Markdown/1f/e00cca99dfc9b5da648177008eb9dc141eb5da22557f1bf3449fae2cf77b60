I"<c<p><a href="https://www.acmicpc.net/problem/3830">https://www.acmicpc.net/problem/3830</a></p>

<p>union-find + online/offline query를 이용하여 해결했습니다. 쿼리를 모두 받아서 그래프를 다 완성하고 질의를 하는 것과 쿼리를 받는 중간에 질의를 하는 것의 차이는 UNKNOWN이냐 아니냐의 차이 뿐입니다. UNKNOWN이 아니라면 값은 동일합니다.</p>

<p>따라서 ?가 입력이 되면 현재 두 노드가 연결이 되어 있는지 union-find를 통해 O(1)의 시간복잡도로 알 수 있고, 연결되어 있지 않는다면 미리 UNKNOWN을 저장해둡니다.</p>

<p>쿼리를 다 받은 후 offline에서 완성된 그래프에 대하여 무게 차이를 구합니다. (UNKNOWN이 아니라면 그래프가 완성된 후에 무게 차이를 구해도 답은 동일합니다.)</p>

<p>무게는 각 그룹에서 가장 가벼운 물건을 기준으로 얼마나 더 무거운지를 탐색과정에서 배열에 저장하였습니다. (union-find에서 그룹의 대표값이 가장 가벼운 물건이 되도록 설정할 수 있습니다.)</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
#define ff first
#define ss second
#define pb push_back
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">SZ</span><span class="o">=</span><span class="mi">100005</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MXJ</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">graph</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">uni</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">vst</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="n">ll</span> <span class="n">dst</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="n">pii</span> <span class="n">qry</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="n">uni</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">uni</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="n">uni</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
	<span class="n">x</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
	<span class="n">y</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
	<span class="n">uni</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">=</span><span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">ll</span> <span class="n">d</span><span class="p">){</span>
	<span class="n">vst</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
	<span class="n">dst</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="n">pii</span> <span class="n">nxt</span><span class="o">:</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">vst</span><span class="p">[</span><span class="n">nxt</span><span class="p">.</span><span class="n">ff</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
		<span class="n">dfs</span><span class="p">(</span><span class="n">nxt</span><span class="p">.</span><span class="n">ff</span><span class="p">,</span><span class="n">d</span><span class="o">+</span><span class="p">(</span><span class="n">ll</span><span class="p">)</span><span class="n">nxt</span><span class="p">.</span><span class="n">ss</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">memo</span><span class="p">(){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">vst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="n">dfs</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="mi">0</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">init</span><span class="p">(){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="n">uni</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">clear</span><span class="p">();</span>
	<span class="p">}</span>
	<span class="n">memset</span><span class="p">(</span><span class="n">dst</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">dst</span><span class="p">));</span>
	<span class="n">memset</span><span class="p">(</span><span class="n">vst</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">vst</span><span class="p">));</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
		<span class="n">init</span><span class="p">();</span>
		<span class="kt">int</span> <span class="n">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="kt">char</span> <span class="n">o</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">o</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="n">o</span><span class="o">==</span><span class="sc">'!'</span><span class="p">){</span>
				<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="o">&gt;&gt;</span><span class="n">z</span><span class="p">;</span>
				<span class="n">merge</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>
				<span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">pb</span><span class="p">({</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">});</span>
				<span class="n">graph</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">pb</span><span class="p">({</span><span class="n">x</span><span class="p">,</span><span class="o">-</span><span class="n">z</span><span class="p">});</span>
			<span class="p">}</span>
			<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">o</span><span class="o">==</span><span class="sc">'?'</span><span class="p">){</span>
				<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
				<span class="k">if</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">!=</span><span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">))</span> <span class="n">qry</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span>
				<span class="k">else</span> <span class="n">qry</span><span class="p">[</span><span class="n">p</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">};</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="n">memo</span><span class="p">();</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">qry</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ff</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"UNKNOWN"</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
			<span class="k">else</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">dst</span><span class="p">[</span><span class="n">qry</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ss</span><span class="p">]</span><span class="o">-</span><span class="n">dst</span><span class="p">[</span><span class="n">qry</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ff</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>사실 union-find로만 짤 수 있는 방법이 있습니다! 다음 방법에서도 dist 배열에는 subtree에서 가장 작은 가중치와의 차이를 저장합니다.</p>

<p>union-find는 sub-tree 2개를 1개로 합치는 과정이라 볼 수 있습니다. 따라서 merge 과정에서는 root가 되지 못하는 sub-tree의 루트의 dist를 update하고, find 과정에서 이를 반영해 줍니다.</p>

<h4 id="find-과정">find 과정</h4>

<p><img src="/img/2019-08-18-icpc3830-1.png" alt="union-find" width="200" height="200" /></p>

<p>B의 subtree 안에 있는 노드 n은 merge 후에도 x가 저장이 되어 있을 겁니다. 하지만 우리는 x+y를 찾아야 하죠. 따라서 find 과정에서 업데이트 되기 전 루트노드에 저장되어 있는 dist값인 y를 더해주면 됩니다.</p>

<h4 id="merge-과정">merge 과정</h4>

<p><img src="/img/2019-08-18-icpc3830-2.png" alt="union-find" width="200" height="200" /></p>

<p>하지만 find를 제대로 수행하기 위해서는 연결되기 전 subtree의 루트였던 값들이 merge에서 제대로 update가 되어야 합니다. 어떻게 하면 될까요?</p>

<p>서로 다른 두 집합에 있던 X,Y를 연결하는 상황을 생각해봅시다. (같은 집합에 있었다면 merge하지 않아도 됩니다.) PX는 연결되기 전 X가 속해있는 집합의 대표값이고, PY는 Y가 속해있는 집합의 대표값입니다.</p>

<p>연결되기 전 dst[PX], dst[PY]는 0이 될겁니다. 우리는 merge에서 PX, PY 중에서 누가 루트가 될 지 고르고 루트가 아닌 노드의 dst를 update해야 합니다.</p>

<p>dst[PY] 를 update한다고 가정합시다. dst[PY]=dst[X]+w-dst[Y]라는 식이 성립할 겁니다.(그림을 참고해 주세요!) dst[X]+w-dst[Y]&gt;0 이라면 PX의 무게가 가장 작기 때문에 dst[PY]를 update해준 뒤
PY의 부모를 PX로 update해주면 됩니다.</p>

<p>0보다 작다면 PY가 루트가 되겠네요. 반대로 해줍시다.</p>

<p>두번째 방법의 코드를 봅시다!</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">SZ</span><span class="o">=</span><span class="mi">100005</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="n">ll</span> <span class="n">dst</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">par</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">px</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
	<span class="n">dst</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+=</span><span class="n">dst</span><span class="p">[</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]];</span>
	<span class="k">return</span> <span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">px</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="n">ll</span> <span class="n">w</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">px</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">py</span><span class="o">=</span><span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">px</span><span class="o">==</span><span class="n">py</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
	<span class="n">ll</span> <span class="n">nd</span><span class="o">=</span><span class="n">dst</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">w</span><span class="o">-</span><span class="n">dst</span><span class="p">[</span><span class="n">y</span><span class="p">];</span>
	<span class="k">if</span><span class="p">(</span><span class="n">nd</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
		<span class="n">par</span><span class="p">[</span><span class="n">py</span><span class="p">]</span><span class="o">=</span><span class="n">px</span><span class="p">;</span>
		<span class="n">dst</span><span class="p">[</span><span class="n">py</span><span class="p">]</span><span class="o">=</span><span class="n">nd</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span><span class="p">{</span>
		<span class="n">par</span><span class="p">[</span><span class="n">px</span><span class="p">]</span><span class="o">=</span><span class="n">py</span><span class="p">;</span>
		<span class="n">dst</span><span class="p">[</span><span class="n">px</span><span class="p">]</span><span class="o">=-</span><span class="n">nd</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
			<span class="n">dst</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0LL</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="kt">char</span> <span class="n">op</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">op</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="n">op</span><span class="o">==</span><span class="sc">'!'</span><span class="p">){</span>
				<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="o">&gt;&gt;</span><span class="n">z</span><span class="p">;</span>
				<span class="n">merge</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">op</span><span class="o">==</span><span class="sc">'?'</span><span class="p">){</span>
				<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
				<span class="k">if</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">!=</span><span class="n">find</span><span class="p">(</span><span class="n">y</span><span class="p">))</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"UNKNOWN"</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
				<span class="k">else</span><span class="p">{</span>
					<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">dst</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">-</span><span class="n">dst</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>			
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET