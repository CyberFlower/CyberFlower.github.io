I"S<p><a href="https://www.acmicpc.net/problem/17399">https://www.acmicpc.net/problem/17399</a></p>

<p>숭고한 공식 풀이는 <a href="https://drive.google.com/file/d/1XwcQgX81fR_2ULyzXoY1DZ1Y9EsXyu-_/view">여기</a>서 보실 수 있습니다.</p>

<p>제가 낸 문제입니다!! 처음으로 boj에 올린 문제인데, 꽤 잘 만든 것 같습니다. ㅎㅎ</p>

<p>결론부터 말하자면 세 노드 (A,B),(A,C),(B,C)의 중심 중에 하나가 트리의 외심이 될 수 있습니다. 이 정점 외에는 트리의 외심을 만족하는 정점은 존재하지 않습니다.</p>

<p>간단하게 증명을 해보겠습니다. 우리는 A,B,C를 모두 포함하는 가장 작은 subtree G를 생각할 수 있습니다.</p>

<p><img src="/img/2019-08-11-17399-1.png" alt="트리 추상화" width="200" height="200" /></p>

<h4 id="보조정리-1-g-외부에서-3개의-노드로부터-같은-거리에-있는-노드-x가-존재한다면-g-내부에-3개의-노드와-더-가까운-노드-y가-존재한다">보조정리 1. G 외부에서 3개의 노드로부터 같은 거리에 있는 노드 X가 존재한다면 G 내부에 3개의 노드와 더 가까운 노드 Y가 존재한다.</h4>

<p>트리이기 때문에 X에서 A,B,C로 가는 경로가 유일합니다. 따라서 X에서 G로 가는 최단경로 또한 유일하고 이 만큼 X를 G로 이동시키면 더 가까운 노드 Y가 존재합니다.</p>

<p>즉, 외심이 존재한다면 이는 G 위에 있다는 사실이 증명되었습니다.</p>

<h4 id="보조정리-2-g-위에서-abc의-외심은-유일하거나-존재하지-않는다">보조정리 2. G 위에서 A,B,C의 외심은 유일하거나 존재하지 않는다.</h4>

<p>2개 이상의 외심 O1, O2가 존재한다고 가정해 봅시다.</p>

<p>G위에 있으므로 $ O_1O_2=0 $ 이고  모순입니다.</p>

<p>따라서 G위에 외심은 유일하거나 존재하지 않습니다.</p>

<h4 id="보조정리-3-외심이-존재한다면-외심의-후보는-ab-bc-ac의-중심-3개뿐입니다">보조정리 3. 외심이 존재한다면, 외심의 후보는 (A,B), (B,C), (A,C)의 중심 3개뿐입니다.</h4>

<p>외심이 후보가 아닌 노드에 있다고 가정합시다.</p>

<p>또, $ M(A,B)=M_1, M(A,C)=M_2, M(B,C)=M_3 $ 라 합시다.</p>

<p>가정에 의하여 $ OM_1&gt;0 $ 이므로 $A,B,L_1$ 을 포함하는 subtree 외부에 있습니다.</p>

<p>같은 방식으로 하여 O는 $ A,C,L_2 $ subtree 외부, $ B,C,L_2 $ subtree 외부에 있습니다.</p>

<p>O는 G위에 있는데 G와 3개의 subtree의 교집합이 공집합이므로 모순입니다.</p>

<p>따라서 외심의 후보는 3개 뿐입니다.</p>

<p>즉, 3개의 후보에 대하여 A,B,C까지의 거리가 모두 같은지 확인하고, 모두 같다면 트리의 외심이 되고 모두 같지 않다면 트리의 외심이 아니게 됩니다.</p>

<p>트리에서 두 노드의 중심은 <a href="https://cyberflower.github.io/2019/07/22/LCA.html">LCA 알고리즘</a>을 이용하면 쿼리당 log(n)의 시간복잡도로 구할 수 있습니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">SZ</span><span class="o">=</span><span class="mi">100005</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MXH</span><span class="o">=</span><span class="mi">18</span><span class="p">;</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">graph</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">par</span><span class="p">[</span><span class="n">MXH</span><span class="p">][</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">lv</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">vst</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
<span class="kt">void</span> <span class="nf">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">parent</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span><span class="p">){</span>
	<span class="n">vst</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
	<span class="n">par</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">parent</span><span class="p">;</span>
	<span class="n">lv</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="n">level</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">nxt</span><span class="o">:</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">vst</span><span class="p">[</span><span class="n">nxt</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
		<span class="n">dfs</span><span class="p">(</span><span class="n">nxt</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">level</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">memo</span><span class="p">(){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">MXH</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
			<span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]];</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">level_up</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">diff</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">MXH</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
		<span class="k">if</span><span class="p">((</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">)</span><span class="o">&amp;</span><span class="n">diff</span><span class="p">)</span> <span class="n">x</span><span class="o">=</span><span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">lca</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
	<span class="n">x</span><span class="o">=</span><span class="n">level_up</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">lv</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">-</span><span class="n">lv</span><span class="p">[</span><span class="n">y</span><span class="p">]));</span>
	<span class="n">y</span><span class="o">=</span><span class="n">level_up</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">lv</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">-</span><span class="n">lv</span><span class="p">[</span><span class="n">x</span><span class="p">]));</span>
	<span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="n">y</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">MXH</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">!=</span><span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">]){</span>
			<span class="n">x</span><span class="o">=</span><span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">];</span>
			<span class="n">y</span><span class="o">=</span><span class="n">par</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">y</span><span class="p">];</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="n">par</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">];</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">tree_dist</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="n">lca</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">lv</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">+</span><span class="n">lv</span><span class="p">[</span><span class="n">b</span><span class="p">]</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="n">lv</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">iso</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">up</span><span class="o">=</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">up</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="n">lv</span><span class="p">[</span><span class="n">a</span><span class="p">]</span><span class="o">&gt;</span><span class="n">lv</span><span class="p">[</span><span class="n">b</span><span class="p">])</span> <span class="k">return</span> <span class="n">level_up</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">up</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
	<span class="k">else</span> <span class="k">return</span> <span class="n">level_up</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">up</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">query</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">){</span>
	<span class="kt">int</span> <span class="n">m1</span><span class="o">=</span><span class="n">iso</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">m2</span><span class="o">=</span><span class="n">iso</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">m3</span><span class="o">=</span><span class="n">iso</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">m1</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">m1</span><span class="p">)</span><span class="o">==</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">m1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">tree_dist</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">m1</span><span class="p">)</span><span class="o">==</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">m1</span><span class="p">))</span> <span class="k">return</span> <span class="n">m1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">m2</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">m2</span><span class="p">)</span><span class="o">==</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">m2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">tree_dist</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">m2</span><span class="p">)</span><span class="o">==</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">m2</span><span class="p">))</span> <span class="k">return</span> <span class="n">m2</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">m3</span><span class="o">!=-</span><span class="mi">1</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">m3</span><span class="p">)</span><span class="o">==</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">m3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">tree_dist</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">m3</span><span class="p">)</span><span class="o">==</span><span class="n">tree_dist</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">m3</span><span class="p">))</span> <span class="k">return</span> <span class="n">m3</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">y</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">dfs</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
	<span class="n">memo</span><span class="p">();</span>
	<span class="kt">int</span> <span class="n">q</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">q</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">q</span><span class="o">--</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="o">&gt;&gt;</span><span class="n">z</span><span class="p">;</span>
		<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">query</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET