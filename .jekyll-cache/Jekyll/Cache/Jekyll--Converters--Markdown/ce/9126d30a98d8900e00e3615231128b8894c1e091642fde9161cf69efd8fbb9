I"*<p><a href="https://www.acmicpc.net/problem/2233">https://www.acmicpc.net/problem/2233</a></p>

<p>트리에서 가지를 잘라내면서 떨어지는 과일을 최소로 한다는 의미는 LCA를 찾으라는 말과 동치입니다. 하지만 쿼리 문제는 아니기 때문에 O(n)의 방식으로 LCA를 구하겠습니다.</p>

<p>dfs했던 결과에서 parent 정보를 뽑아내기 위해서는 스택을 사용하면 편리합니다.(dfs가 스택을 이용하는 탐색이기 때문입니다.)</p>

<p>0: 스택에 새로운 노드를 추가. 스택에 위에 있었던 노드가 추가되는 노드의 부모</p>

<p>1: 스택에서 뽑아냄</p>

<p>나머지는 구현입니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">SZ</span><span class="o">=</span><span class="mi">2005</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">par</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">one</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">zero</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">level</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">SZ</span><span class="p">];</span>
<span class="n">string</span> <span class="n">tree</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">level_up</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">d</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">x</span><span class="o">=</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
	<span class="k">return</span> <span class="n">x</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">tree</span><span class="p">;</span>
	<span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">s</span><span class="p">;</span> <span class="kt">int</span> <span class="n">p</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">idx</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">p</span><span class="o">++</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">char</span> <span class="n">x</span><span class="o">:</span><span class="n">tree</span><span class="p">){</span>
		<span class="n">idx</span><span class="o">++</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="sc">'0'</span><span class="p">){</span>
			<span class="kt">int</span> <span class="n">t</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
			<span class="n">par</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="o">=</span><span class="n">t</span><span class="p">;</span>
			<span class="n">level</span><span class="p">[</span><span class="n">p</span><span class="p">]</span><span class="o">=</span><span class="n">level</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
			<span class="n">zero</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=</span><span class="n">p</span><span class="p">;</span>
			<span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">p</span><span class="o">++</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="k">else</span><span class="p">{</span>
			<span class="n">one</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
			<span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">'0'</span><span class="p">)</span> <span class="n">x</span><span class="o">=</span><span class="n">zero</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
	<span class="k">else</span> <span class="n">x</span><span class="o">=</span><span class="n">one</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
	<span class="k">if</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">==</span><span class="sc">'0'</span><span class="p">)</span> <span class="n">y</span><span class="o">=</span><span class="n">zero</span><span class="p">[</span><span class="n">y</span><span class="p">];</span>
	<span class="k">else</span> <span class="n">y</span><span class="o">=</span><span class="n">one</span><span class="p">[</span><span class="n">y</span><span class="p">];</span>
	<span class="n">x</span><span class="o">=</span><span class="n">level_up</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">level</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">-</span><span class="n">level</span><span class="p">[</span><span class="n">y</span><span class="p">]));</span>
	<span class="n">y</span><span class="o">=</span><span class="n">level_up</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">level</span><span class="p">[</span><span class="n">y</span><span class="p">]</span><span class="o">-</span><span class="n">level</span><span class="p">[</span><span class="n">x</span><span class="p">]));</span>
	<span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="o">!=</span><span class="n">y</span><span class="p">){</span>
		<span class="n">x</span><span class="o">=</span><span class="n">par</span><span class="p">[</span><span class="n">x</span><span class="p">];</span>
		<span class="n">y</span><span class="o">=</span><span class="n">par</span><span class="p">[</span><span class="n">y</span><span class="p">];</span>
	<span class="p">}</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">zero</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">x</span><span class="p">){</span>
			<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">one</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">x</span><span class="p">){</span>
			<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET