I"1N<p>최대 유량을 구하는 네트워크 플로우 알고리즘인 Ford_Fulkerson 알고리즘과 Edmond Karp알고리즘을 소개해 드렸습니다. <a href="https://cyberflower.github.io/2019/07/28/flow.html">네크워크 플로우 알고리즘 1</a></p>

<p>오늘은 동일한 역할을 하는 알고리즘이지만 시간복잡도가 더 좋은 Dinic 알고리즘을 소개하도록 하겠습니다.</p>

<p>Dinic의 전체적인 생김새는 F.F와 비슷합니다. 일단 대략적인 개관을 보도록 하겠습니다.</p>

<ol>
  <li>bfs를 이용하여 레벨 그래프를 만듭니다. capacity가 0 이하면 흐를 수 없음에 유의해 주어야 합니다.</li>
  <li>만들어진 레벨 그래프를 기반으로 플로우를 흘려줍니다. 현재 노드에서 가장 마지막으로 방문한 점을 저장하는 배열을 하나 만들어 <em>흘렸던 유량을 다시 확인하지 않도록</em> 합니다.</li>
  <li>1,2의 과정을 레벨 그래프를 만들 수 없을 때 까지(synk까지 연결이 되지 않을 때 까지) 반복합니다.</li>
</ol>

<p>코드 세부 내용을 설명하자면, 기존의 일반적인 그래프 문제에는 그래프와 capacity를 아래 코드처럼 선언했었습니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">graph</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">cap</span><span class="p">[</span><span class="n">SZ</span><span class="p">][</span><span class="n">SZ</span><span class="p">];</span>
</code></pre></div></div>

<p>하지만 네트워크 플로우 알고리즘에서는 정점의 개수가 $ 10^4 $ 이상인 경우도 충분히 존재할 수 있습니다. 따라서 저는 Edge라는 구조체를 하나 선언하여 간선과 capacity에 대한 정보를 저장하도록 하겠습니다.</p>

<p>Dinic 알고리즘을 이용한 <a href="https://www.acmicpc.net/problem/11376">열혈강호 2</a> 문제의 코드입니다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
#define pb push_back
#define INF (int)1e9
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">struct</span> <span class="nc">edge</span><span class="p">{</span>
	<span class="kt">int</span> <span class="n">to</span><span class="p">,</span><span class="n">cap</span><span class="p">,</span><span class="n">rev</span><span class="p">;</span>
	<span class="n">edge</span><span class="p">(</span><span class="kt">int</span> <span class="n">to</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cap</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rev</span><span class="p">){</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">to</span><span class="o">=</span><span class="n">to</span><span class="p">;</span>		<span class="c1">// 어디로 흐르는가</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">cap</span><span class="o">=</span><span class="n">cap</span><span class="p">;</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">rev</span><span class="o">=</span><span class="n">rev</span><span class="p">;</span>	<span class="c1">// 역간선이 저장되어 있는 index number 저장</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="nc">Dinic</span><span class="p">{</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="n">src</span><span class="p">,</span><span class="n">dst</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">edge</span><span class="o">&gt;&gt;</span> <span class="n">graph</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">crt</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">lv</span><span class="p">;</span>
	<span class="n">Dinic</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">src</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dst</span><span class="p">){</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="p">;</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">m</span><span class="o">=</span><span class="n">m</span><span class="p">;</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">src</span><span class="o">=</span><span class="n">src</span><span class="p">;</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">dst</span><span class="o">=</span><span class="n">dst</span><span class="p">;</span>
		<span class="n">graph</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="o">+</span><span class="mi">5</span><span class="p">);</span>
		<span class="n">crt</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="o">+</span><span class="mi">5</span><span class="p">);</span>
		<span class="n">lv</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="o">+</span><span class="mi">5</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="n">push_edge</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">capa</span><span class="p">){</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">pb</span><span class="p">(</span><span class="n">edge</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="n">capa</span><span class="p">,</span><span class="n">graph</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">size</span><span class="p">()));</span>
		<span class="n">graph</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">pb</span><span class="p">(</span><span class="n">edge</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">graph</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
	<span class="p">}</span>
	<span class="kt">bool</span> <span class="n">bfs</span><span class="p">(){</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">lv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
		<span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
		<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">src</span><span class="p">);</span> <span class="n">lv</span><span class="p">[</span><span class="n">src</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
		<span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
			<span class="kt">int</span> <span class="n">f</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span> <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
			<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">nxt</span><span class="o">:</span><span class="n">graph</span><span class="p">[</span><span class="n">f</span><span class="p">]){</span>
				<span class="k">if</span><span class="p">(</span><span class="n">lv</span><span class="p">[</span><span class="n">nxt</span><span class="p">.</span><span class="n">to</span><span class="p">]</span> <span class="o">||</span> <span class="n">nxt</span><span class="p">.</span><span class="n">cap</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
				<span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">nxt</span><span class="p">.</span><span class="n">to</span><span class="p">);</span> <span class="n">lv</span><span class="p">[</span><span class="n">nxt</span><span class="p">.</span><span class="n">to</span><span class="p">]</span><span class="o">=</span><span class="n">lv</span><span class="p">[</span><span class="n">f</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="n">lv</span><span class="p">[</span><span class="n">dst</span><span class="p">]</span><span class="o">!=</span><span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">dfs</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mnc</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="n">dst</span><span class="p">)</span> <span class="k">return</span> <span class="n">mnc</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">i</span><span class="o">=</span><span class="n">crt</span><span class="p">[</span><span class="n">x</span><span class="p">];</span><span class="n">i</span><span class="o">&lt;</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">].</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="k">auto</span> <span class="o">&amp;</span><span class="n">e</span><span class="o">=</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
			<span class="k">if</span><span class="p">(</span><span class="n">lv</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">&gt;=</span><span class="n">lv</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">]</span> <span class="o">||</span> <span class="n">e</span><span class="p">.</span><span class="n">cap</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">f</span><span class="o">=</span><span class="n">dfs</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">,</span><span class="n">min</span><span class="p">(</span><span class="n">mnc</span><span class="p">,</span><span class="n">e</span><span class="p">.</span><span class="n">cap</span><span class="p">));</span>
			<span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
				<span class="n">e</span><span class="p">.</span><span class="n">cap</span><span class="o">-=</span><span class="n">f</span><span class="p">;</span>
				<span class="n">graph</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">to</span><span class="p">][</span><span class="n">e</span><span class="p">.</span><span class="n">rev</span><span class="p">].</span><span class="n">cap</span><span class="o">+=</span><span class="n">f</span><span class="p">;</span>
				<span class="k">return</span> <span class="n">f</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">int</span> <span class="n">flow</span><span class="p">(){</span>
		<span class="kt">int</span> <span class="n">ans</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
		<span class="k">while</span><span class="p">(</span><span class="n">bfs</span><span class="p">()){</span>
			<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">crt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
			<span class="kt">int</span> <span class="n">f</span><span class="p">;</span>
			<span class="k">while</span><span class="p">((</span><span class="n">f</span><span class="o">=</span><span class="n">dfs</span><span class="p">(</span><span class="n">src</span><span class="p">,</span><span class="n">INF</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
				<span class="n">ans</span><span class="o">+=</span><span class="n">f</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
	<span class="n">Dinic</span> <span class="n">dn</span><span class="o">=</span><span class="n">Dinic</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">dn</span><span class="p">.</span><span class="n">push_edge</span><span class="p">(</span><span class="n">dn</span><span class="p">.</span><span class="n">src</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">dn</span><span class="p">.</span><span class="n">push_edge</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">dn</span><span class="p">.</span><span class="n">dst</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">x</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">x</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
			<span class="kt">int</span> <span class="n">y</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">y</span><span class="p">;</span>
			<span class="n">dn</span><span class="p">.</span><span class="n">push_edge</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="n">y</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">dn</span><span class="p">.</span><span class="n">flow</span><span class="p">();</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET