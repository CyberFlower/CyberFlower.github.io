I"<p><a href="https://www.acmicpc.net/problem/9006">https://www.acmicpc.net/problem/9006</a></p>

<p>처음 문제를 보고 든 생각은 “다리의 높이를 기준으로 3분 탐색을 진행하여 최소값을 찾으면 되겠구나!” 였다. 하지만 자료형 변환 때문인지 팀 연습 때 3분 탐색으로 20번쯤 틀렸다…</p>

<p>두번째로 생각한 풀이는 첫번쨰 풀이보다 훨씬 쉽고 간단하다. 각 노드에 가중치를 부여한 후 중앙값을 구하는 방식이다.</p>

<p>우리가 아는 일차원 도로에서 매장 세우기 문제로 치환할 수 있는 것이다. 왼쪽 거리에 있는 집들의 가중치는 오른쪽 거리의 집의 개수인 m, 오른쪽 거리에 있는 집들의 가중치는 n이다.</p>

<p>왜냐하면, 왼쪽 거리에 있는 집들은 m개의 집과 연결되고, 오른쪽 거리에 있는 집들은 n개의 집과 연결되기 때문에 하나의 도로에서 같은 집이 여러개 있다고 봐도 무관하다.</p>

<p>코드는 무척 간단하다. 나중에 삼분탐색 코드로도 “맞았습니다!”가 뜨면 삼분탐색 코드도 올리도록 하겠다.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">SZ</span><span class="o">=</span><span class="mi">2000005</span><span class="p">;</span>
<span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">ll</span><span class="p">;</span>
<span class="n">pair</span><span class="o">&lt;</span><span class="n">ll</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">SZ</span><span class="p">];</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
	<span class="n">ios</span><span class="o">::</span><span class="n">sync_with_stdio</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span> <span class="n">cin</span><span class="p">.</span><span class="n">tie</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">t</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">t</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">--</span><span class="p">){</span>
		<span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="o">&gt;&gt;</span><span class="n">m</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="n">ll</span> <span class="n">x</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
			<span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="n">x</span><span class="p">,</span><span class="n">m</span><span class="p">};</span>
		<span class="p">}</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="n">ll</span> <span class="n">x</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">x</span><span class="p">;</span>
			<span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="n">x</span><span class="p">,</span><span class="n">n</span><span class="p">};</span>
		<span class="p">}</span>
		<span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span><span class="n">arr</span><span class="o">+</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="p">);</span>
		<span class="n">ll</span> <span class="n">xx</span><span class="o">=-</span><span class="p">(</span><span class="n">ll</span><span class="p">)</span><span class="n">n</span><span class="o">*</span><span class="p">(</span><span class="n">ll</span><span class="p">)</span><span class="n">m</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="n">xx</span><span class="o">+=</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="n">xx</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span>
				<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">fixed</span><span class="p">;</span> <span class="n">cout</span><span class="p">.</span><span class="n">precision</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
				<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="kt">double</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="sc">'\n'</span><span class="p">;</span>
				<span class="k">break</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
:ET